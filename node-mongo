const mongodb = require('mongodb');
const Promise = require("bluebird");
const _ = require('lodash');

const MongoClient = mongodb.MongoClient;

// Connect to the db
const mongoUrl = "mongodb://localhost:27017/local";

const FUND_MESSAGES_AGGREGATION_QUERY =
    [{
        $match: {
            "result.subFundType": "FUND"
        },
    },
        {
            $project: {
                subFundId: "$result.subFundId",
                source: "$result.fsource",
                runId: "$result.originalRunId",
                priceRunType: "$result.priceRunType",
                processingProgress: "$result.processingProgress",
                processingStatus: "$result.processingStatus",
                processingTimestamp: "$result.processingTimestamp"

            }
        },
        {
            $sort: {
                processingTimestamp: 1
            }
        },
        {
            $group: {
                _id: {$concat: ["$source", ":", "$subFundId"]},
                messages: {
                    $addToSet: "$$ROOT"
                }
            }
        }];



MongoClient.connect(mongoUrl, (err, db) => {
    if (err) {
        console.log("Failed to connect", err);
        return;
    }
    console.log("We are connected");

    // console.dir(db);
    let collection = db.db('local').collection('splunk');
    collection = Promise.promisifyAll(collection);

    collection.aggregateAsync(FUND_MESSAGES_AGGREGATION_QUERY)
        .then(collectFundMessages)
        .then(processFundMessages)
        .then(searchOutOfOrderFundMessages)
        .then(fundMessages => fundMessages.map(i => i._id))
        .then(printResults)
        .catch(err => {
            console.log("Error:", err);
        });


});

const collectFundMessages = (cursor) => {
    console.log("collectFundMessages");
    const fundMessages = [];
    return new Promise((resolve, reject) => {
        cursor.forEach(value => {
            fundMessages.push(value);
        }, err => {
            // resolve
            if (err) reject(err);
            console.log("collectFundMessages Done");

            resolve(fundMessages);

        });
    })
};

const searchOutOfOrderFundMessages = (fundMessages) => {
    console.log("searchOutOfOrderFundMessages");
    return fundMessages.filter(fundMessage => {
        let messages1 = _.chain(fundMessage.messages)
            .clone()
            .sortBy(["runId", "processingTimestamp"])
            .value();

        let messages2 = _.chain(fundMessage.messages)
            .clone()
            .sortBy(["processingTimestamp", "runId"])
            .value();

        return !_.isEqual(messages1, messages2);
    });
};


const processFundMessages = (fundMessages) => {
    console.log("sortFundMessages");
    fundMessages.forEach(fundMessage => {
        fundMessage.messages = _.chain(fundMessage.messages)
            .forEach(m => delete m._id)
            .filter(m => (m.processingProgress === 'Not Released') || (m.processingProgress === 'Unapproved'))
            .sortBy('processingTimestamp')
            .sortedUniqBy('processingTimestamp')
            .value();
    });

    fundMessages = fundMessages.filter(i => i.messages.length > 1);
    return fundMessages;
};


const printResults = (results) => {
    console.log("printResults");
    results.forEach(result => console.log(result));
};

